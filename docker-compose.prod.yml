version: "3"

services:
  mysqldb:
    build: ./backend/db
    container_name: mysqldb
    env_file:
      - "./backend/db/.env"
    ports:
      - 3307:3307
    volumes:
      - mysql-data:/var/lib/mysql
    # networks:
    #   - app-network

  backend:
    build:
      context: ./backend/django_backend
      dockerfile: Dockerfile
    container_name: Alddeul-Backend
    ports:
      - 8000:8000
    volumes:
      - ./backend:/app
      - ./backend/django_backend/static:/app/static
      - ./backend/django_backend/media:/app/media
    restart: always
    depends_on:
      - mysqldb
    command: bash -c "
      python wait_mysql.py &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn --bind 0.0.0.0:8000 django_backend.wsgi:application
      "

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        API_URL: "*"
    container_name: Alddeul-Frontend
    command: yarn dev
    ports:
      - 3001:3001
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules
    tty: true

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./backend/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./backend/django_backend/static:/app/static
      - ./backend/django_backend/media:/app/media
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    # networks:
    #   - app-network

  redis_container:
    image: redis:latest
    container_name: redis
    environment:
      - TZ=Asia/Seoul
    ports:
      - 6379:6379
    volumes:
      - ./backend/redis/data:/data
      - ./backend/redis/conf/redis.conf:/usr/local/conf/redis.conf
    depends_on:
      - backend
    labels:
      - "name=redis"
      - "mode=standalone"
    restart: always
    command: redis-server /usr/local/conf/redis.conf
    # networks:
    #   - app-network

  prometheus:
    image: prom/prometheus:v2.45.6
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./backend/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    # networks:
    #   - app-network

  grafana:
    image: grafana/grafana:9.5.20
    container_name: grafana
    volumes:
      - ./backend/grafana:/etc/grafana/provisioning
      - ./backend/grafana/data:/var/lib/grafana
    ports:
      - "3000:3000"
    # networks:
    #   - app-network

  certbot: #certbot 컨테이너 추가
    image: certbot/certbot
    restart: unless-stopped
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  mysql-data:
  redis-data:
